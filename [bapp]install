"""
install.py — 自动安装当前 .blend 文件中带有 [addon] 前缀的插件文本块（支持热更新）

TODO: this can't hot reload addons when called from SAB

功能：
1. 扫描所有 [addon] 开头的 Text Block；
2. 写入 Blender 的 Add-ons 目录；
3. 自动卸载旧版本（unregister + 清除 sys.modules 缓存）；
4. 启用新版本（自动 register）；
5. 覆盖更新，立即生效；
6. 可选保存用户偏好。

作者：徐行 + OpenHana
"""

import bpy
import os
import sys
import tempfile
import importlib
import addon_utils


# === 配置 ===
USE_USER_ADDON_DIR = True      # 写入 Blender 用户 addons 目录（否则写入临时目录）
SAVE_USER_PREFS = True         # 保存偏好，使插件重启后保持启用


# === 函数定义 ===
def install_addon_from_text(text):
    """从 Blender Text Block 安装并热更新插件"""
    name = text.name.strip()
    if not name.lower().startswith("[addon]"):
        return None

    mod_name = name[len("[addon]") :].strip()
    if not mod_name.endswith(".py"):
        mod_name += ".py"

    # 确定路径
    addon_dir = bpy.utils.user_resource("SCRIPTS", path="addons", create=True) if USE_USER_ADDON_DIR else tempfile.gettempdir()
    addon_path = os.path.join(addon_dir, mod_name)
    mod_import_name = os.path.splitext(mod_name)[0]

    # 写入文件（覆盖旧版本）
    with open(addon_path, "w", encoding="utf-8") as f:
        f.write(text.as_string())
    print(f"[Installer] Wrote addon: {addon_path}")

    # 如果插件已加载：先卸载旧版本并清除模块缓存
    if mod_import_name in addon_utils.modules():
        try:
            addon_utils.disable(mod_import_name, default_set=True)
            print(f"[Installer] Disabled old version of '{mod_import_name}'")
        except Exception:
            pass

    if mod_import_name in sys.modules:
        del sys.modules[mod_import_name]
        print(f"[Installer] Cleared sys.modules cache for '{mod_import_name}'")

    # 启用并 register 新版本
    try:
        addon_utils.enable(mod_import_name, default_set=True, persistent=True)
        print(f"[Installer] Enabled '{mod_import_name}' ✅")
        return mod_import_name
    except Exception as e:
        print(f"[Installer] ❌ Failed to enable '{mod_import_name}': {e}")
        return None


def main():
    """扫描并批量安装 [addon] 插件"""
    installed = []
    for text in bpy.data.texts:
        if text.name.lower().startswith("[addon]"):
            mod = install_addon_from_text(text)
            if mod:
                installed.append(mod)

    if not installed:
        print("[Installer] No [addon] text blocks found in this file.")
        return

    print(f"[Installer] Installed/Updated {len(installed)} add-on(s): {', '.join(installed)}")

    if SAVE_USER_PREFS:
        try:
            bpy.ops.wm.save_userpref()
            print("[Installer] Saved user preferences (permanent enable).")
        except Exception as e:
            print(f"[Installer] ⚠️ Could not save user preferences: {e}")

    try:
        bpy.ops.wm.addon_refresh()
        print("[Installer] Refreshed Add-ons list.")
    except:
        pass

    print("[Installer] Done.")


# === 主执行入口 ===
if __name__ == "__main__":
    main()
